{"ScanType": "SAST", "Provider": "Semgrep", "Time": "2022-11-15T08:15:26.524283", "CodeFindings": [{"FilePath": "src/main/resources/lessons/clientsidefiltering/js/clientSideFiltering.js", "LineNumber": 6, "EndLineNumber": 6, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/lessons/clientsidefiltering/js/clientSideFiltering.js", "LineNumber": 38, "EndLineNumber": 38, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 3500, "EndLineNumber": 3500, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 5475, "EndLineNumber": 5475, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 17320, "EndLineNumber": 17320, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 17409, "EndLineNumber": 17409, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 21176, "EndLineNumber": 21176, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 21469, "EndLineNumber": 21469, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/quiz.js", "LineNumber": 34, "EndLineNumber": 34, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 1189, "EndLineNumber": 1189, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 1206, "EndLineNumber": 1206, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 4011, "EndLineNumber": 4011, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 4354, "EndLineNumber": 4354, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 4391, "EndLineNumber": 4391, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 5999, "EndLineNumber": 5999, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 6202, "EndLineNumber": 6202, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 6695, "EndLineNumber": 6695, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 7940, "EndLineNumber": 7940, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 7962, "EndLineNumber": 7962, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 8056, "EndLineNumber": 8056, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 4, "Description": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.insecure-document-method.insecure-document-method"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 1740, "EndLineNumber": 1740, "Type": "Insufficient Verification of Data Authenticity", "CweIdentifiers": [["CWE-345: Insufficient Verification of Data Authenticity"]], "Severity": 2, "Description": "The target origin of the window.postMessage() API is set to \"*\". This could allow for information disclosure due to the possibility of any origin allowed to receive the message.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/controller/StartLesson.java", "LineNumber": 71, "EndLineNumber": 71, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/LabelDebugService.java", "LineNumber": 67, "EndLineNumber": 67, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/LabelDebugService.java", "LineNumber": 81, "EndLineNumber": 81, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/LessonInfoService.java", "LineNumber": 29, "EndLineNumber": 29, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/LessonMenuService.java", "LineNumber": 79, "EndLineNumber": 79, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/LessonProgressService.java", "LineNumber": 34, "EndLineNumber": 34, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/LessonTitleService.java", "LineNumber": 30, "EndLineNumber": 30, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/RestartLessonService.java", "LineNumber": 53, "EndLineNumber": 53, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/service/SessionService.java", "LineNumber": 24, "EndLineNumber": 24, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java", "LineNumber": 47, "EndLineNumber": 47, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java", "LineNumber": 67, "EndLineNumber": 67, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/SigningAssignment.java", "LineNumber": 48, "EndLineNumber": 48, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpoint.java", "LineNumber": 59, "EndLineNumber": 59, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/java/org/owasp/webgoat/webwolf/FileServer.java", "LineNumber": 65, "EndLineNumber": 65, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected a method annotated with 'RequestMapping' that does not specify the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS, and by default all HTTP methods are allowed when the HTTP method is not explicitly specified. This means that a method that performs state changes could be vulnerable to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method (such as 'RequestMethod.POST').", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_decode.adoc", "LineNumber": 8, "EndLineNumber": 8, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_libraries.adoc", "LineNumber": 28, "EndLineNumber": 28, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_libraries.adoc", "LineNumber": 40, "EndLineNumber": 40, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_libraries.adoc", "LineNumber": 56, "EndLineNumber": 56, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_libraries_assignment.adoc", "LineNumber": 7, "EndLineNumber": 7, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_libraries_assignment2.adoc", "LineNumber": 7, "EndLineNumber": 7, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_libraries_solution.adoc", "LineNumber": 7, "EndLineNumber": 7, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_signing_solution.adoc", "LineNumber": 35, "EndLineNumber": 35, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/documentation/JWT_signing_solution.adoc", "LineNumber": 77, "EndLineNumber": 77, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/html/JWT.html", "LineNumber": 310, "EndLineNumber": 310, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/resources/lessons/jwt/images/logs.txt", "LineNumber": 2, "EndLineNumber": 2, "Type": "Use of Hard-coded Cryptographic Key", "CweIdentifiers": [["CWE-321: Use of Hard-coded Cryptographic Key"]], "Severity": 4, "Description": "JWT token detected", "standards": ["OWASP"], "Tags": {"CheckId": "generic.secrets.security.detected-jwt-token.detected-jwt-token"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/challenges/challenge5/Assignment5.java", "LineNumber": 59, "EndLineNumber": 59, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.injection.tainted-sql-string.tainted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java", "LineNumber": 63, "EndLineNumber": 63, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.injection.tainted-sql-string.tainted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/mitigation/Servers.java", "LineNumber": 72, "EndLineNumber": 72, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "User data flows into this manually-constructed SQL string. User data can be safely inserted into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate data from the database. Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.injection.tainted-sql-string.tainted-sql-string"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/jquery-ui-1.10.4.js", "LineNumber": 622, "EndLineNumber": 622, "Type": "Improperly Controlled Modification of Dynamically-Determined Object Attributes", "CweIdentifiers": [["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"]], "Severity": 2, "Description": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/underscore-min.js", "LineNumber": 6, "EndLineNumber": 6, "Type": "Improperly Controlled Modification of Dynamically-Determined Object Attributes", "CweIdentifiers": [["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"]], "Severity": 2, "Description": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/underscore-min.js", "LineNumber": 6, "EndLineNumber": 6, "Type": "Improperly Controlled Modification of Dynamically-Determined Object Attributes", "CweIdentifiers": [["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"]], "Severity": 2, "Description": "Possibility of prototype polluting function detected. By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, using an object without prototypes (via Object.create(null) ), blocking modifications of attributes that resolve to object prototype, using Map instead of object.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java", "LineNumber": 56, "EndLineNumber": 56, "Type": "Use of a Broken or Risky Cryptographic Algorithm", "CweIdentifiers": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "Severity": 2, "Description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.weak-hash.use-of-md5"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/EncodingAssignment.java", "LineNumber": 52, "EndLineNumber": 52, "Type": "Use of Insufficiently Random Values", "CweIdentifiers": [["CWE-330: Use of Insufficiently Random Values"]], "Severity": 2, "Description": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.weak-random.weak-random"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java", "LineNumber": 54, "EndLineNumber": 54, "Type": "Use of Insufficiently Random Values", "CweIdentifiers": [["CWE-330: Use of Insufficiently Random Values"]], "Severity": 2, "Description": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.weak-random.weak-random"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java", "LineNumber": 73, "EndLineNumber": 73, "Type": "Use of Insufficiently Random Values", "CweIdentifiers": [["CWE-330: Use of Insufficiently Random Values"]], "Severity": 2, "Description": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.weak-random.weak-random"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/hijacksession/cas/HijackSessionAuthenticationProvider.java", "LineNumber": 51, "EndLineNumber": 51, "Type": "Use of Insufficiently Random Values", "CweIdentifiers": [["CWE-330: Use of Insufficiently Random Values"]], "Severity": 2, "Description": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.weak-random.weak-random"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTSecretKeyEndpoint.java", "LineNumber": 55, "EndLineNumber": 55, "Type": "Use of Insufficiently Random Values", "CweIdentifiers": [["CWE-330: Use of Insufficiently Random Values"]], "Severity": 2, "Description": "Detected use of the functions `Math.random()` or `java.util.Random()`. These are both not cryptographically strong random number generators (RNGs). If you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom` instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.weak-random.weak-random"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionChallenge.java", "LineNumber": 65, "EndLineNumber": 65, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/advanced/SqlInjectionLesson6a.java", "LineNumber": 67, "EndLineNumber": 67, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java", "LineNumber": 63, "EndLineNumber": 63, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java", "LineNumber": 62, "EndLineNumber": 62, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson3.java", "LineNumber": 65, "EndLineNumber": 65, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson4.java", "LineNumber": 63, "EndLineNumber": 63, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5.java", "LineNumber": 73, "EndLineNumber": 73, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson5a.java", "LineNumber": 62, "EndLineNumber": 62, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java", "LineNumber": 66, "EndLineNumber": 66, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson8.java", "LineNumber": 138, "EndLineNumber": 138, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java", "LineNumber": 66, "EndLineNumber": 66, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 4, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/deserialization/InsecureDeserializationTask.java", "LineNumber": 54, "EndLineNumber": 54, "Type": "Deserialization of Untrusted Data", "CweIdentifiers": [["CWE-502: Deserialization of Untrusted Data"]], "Severity": 2, "Description": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.object-deserialization.object-deserialization"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/deserialization/SerializationHelper.java", "LineNumber": 19, "EndLineNumber": 20, "Type": "Deserialization of Untrusted Data", "CweIdentifiers": [["CWE-502: Deserialization of Untrusted Data"]], "Severity": 2, "Description": "Found object deserialization using ObjectInputStream. Deserializing entire Java objects is dangerous because malicious actors can create Java object streams with unintended consequences. Ensure that the objects being deserialized are not user-controlled. If this must be done, consider using HMACs to sign the data stream to make sure it is not tampered with, or consider only transmitting object fields and populating a new object.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.object-deserialization.object-deserialization"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson10.java", "LineNumber": 63, "EndLineNumber": 63, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 2, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson2.java", "LineNumber": 62, "EndLineNumber": 62, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 2, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/sqlinjection/introduction/SqlInjectionLesson9.java", "LineNumber": 66, "EndLineNumber": 66, "Type": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "CweIdentifiers": [["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"]], "Severity": 2, "Description": "Detected a formatted string in a SQL statement. This could lead to SQL injection if variables in the SQL statement are not properly sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement using 'connection.prepareStatement'.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/EncodingAssignment.java", "LineNumber": 54, "EndLineNumber": 54, "Type": "Trust Boundary Violation", "CweIdentifiers": [["CWE-501: Trust Boundary Violation"]], "Severity": 2, "Description": "Detected input from a HTTPServletRequest going into a session command, like `setAttribute`. User input into such a command could lead to an attacker inputting malicious code into your session parameters,  blurring the line between what's trusted and untrusted,  and therefore leading to a trust boundary violation. This could lead to programmers trusting unvalidated data. Instead, thoroughly sanitize user input before passing it into such function calls.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 4491, "EndLineNumber": 4491, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `component` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 6429, "EndLineNumber": 6429, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `flag` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 9471, "EndLineNumber": 9471, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `column` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 9807, "EndLineNumber": 9812, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `position` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 9859, "EndLineNumber": 9864, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `position` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 11797, "EndLineNumber": 11797, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `options` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/ace.js", "LineNumber": 11808, "EndLineNumber": 11808, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `modifier` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/backbone-min.js", "LineNumber": 1, "EndLineNumber": 1, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `t` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/jquery-ui-1.10.4.js", "LineNumber": 7171, "EndLineNumber": 7171, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `term` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/jquery-ui-1.10.4.js", "LineNumber": 11639, "EndLineNumber": 11639, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `event` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/jquery-ui-1.10.4.js", "LineNumber": 11651, "EndLineNumber": 11651, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `event` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/mode-java.js", "LineNumber": 573, "EndLineNumber": 575, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `commentRegex` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/mode-java.js", "LineNumber": 576, "EndLineNumber": 578, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `commentRegex` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/underscore-min.js", "LineNumber": 6, "EndLineNumber": 6, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `n` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/underscore-min.js", "LineNumber": 6, "EndLineNumber": 6, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `n` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/js/libs/underscore-min.js", "LineNumber": 6, "EndLineNumber": 6, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `n` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 843, "EndLineNumber": 843, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `nodeTypes` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 4079, "EndLineNumber": 4079, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `className` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/resources/webgoat/static/plugins/bootstrap-wysihtml5/js/wysihtml5-0.3.0.js", "LineNumber": 4088, "EndLineNumber": 4088, "Type": "Inefficient Regular Expression Complexity", "CweIdentifiers": [["CWE-1333: Inefficient Regular Expression Complexity"]], "Severity": 2, "Description": "RegExp() called with a `className` function argument, this might  allow an attacker to cause a Denial of Service (DoS)  within your application as RegExP which blocks the main thread.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 105, "EndLineNumber": 105, "Type": "Cleartext Transmission of Sensitive Information", "CweIdentifiers": [["CWE-319: Cleartext Transmission of Sensitive Information"]], "Severity": 2, "Description": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.", "standards": ["OWASP"], "Tags": {"CheckId": "java.servlets.security.cookie-issecure-false.cookie-issecure-false"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 110, "EndLineNumber": 110, "Type": "Cleartext Transmission of Sensitive Information", "CweIdentifiers": [["CWE-319: Cleartext Transmission of Sensitive Information"]], "Severity": 2, "Description": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.", "standards": ["OWASP"], "Tags": {"CheckId": "java.servlets.security.cookie-issecure-false.cookie-issecure-false"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java", "LineNumber": 79, "EndLineNumber": 79, "Type": "Cleartext Transmission of Sensitive Information", "CweIdentifiers": [["CWE-319: Cleartext Transmission of Sensitive Information"]], "Severity": 2, "Description": "Default session middleware settings: `setSecure` not set to true. This ensures that the cookie is sent only over HTTPS to prevent cross-site scripting attacks.", "standards": ["OWASP"], "Tags": {"CheckId": "java.servlets.security.cookie-issecure-false.cookie-issecure-false"}}, {"FilePath": "docs/index.html", "LineNumber": 7, "EndLineNumber": 7, "Type": "Missing Support for Integrity Check", "CweIdentifiers": [["CWE-353: Missing Support for Integrity Check"]], "Severity": 2, "Description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "standards": ["OWASP"], "Tags": {"CheckId": "html.security.audit.missing-integrity.missing-integrity"}}, {"FilePath": "src/main/resources/lessons/hijacksession/html/HijackSession.html", "LineNumber": 5, "EndLineNumber": 6, "Type": "Missing Support for Integrity Check", "CweIdentifiers": [["CWE-353: Missing Support for Integrity Check"]], "Severity": 2, "Description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "standards": ["OWASP"], "Tags": {"CheckId": "html.security.audit.missing-integrity.missing-integrity"}}, {"FilePath": "src/main/resources/lessons/spoofcookie/html/SpoofCookie.html", "LineNumber": 5, "EndLineNumber": 6, "Type": "Missing Support for Integrity Check", "CweIdentifiers": [["CWE-353: Missing Support for Integrity Check"]], "Severity": 2, "Description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "standards": ["OWASP"], "Tags": {"CheckId": "html.security.audit.missing-integrity.missing-integrity"}}, {"FilePath": "src/main/resources/lessons/vulnerablecomponents/html/VulnerableComponents.html", "LineNumber": 5, "EndLineNumber": 5, "Type": "Missing Support for Integrity Check", "CweIdentifiers": [["CWE-353: Missing Support for Integrity Check"]], "Severity": 2, "Description": "This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.", "standards": ["OWASP"], "Tags": {"CheckId": "html.security.audit.missing-integrity.missing-integrity"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 106, "EndLineNumber": 106, "Type": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "CweIdentifiers": [["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"]], "Severity": 2, "Description": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 111, "EndLineNumber": 111, "Type": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "CweIdentifiers": [["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"]], "Severity": 2, "Description": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java", "LineNumber": 81, "EndLineNumber": 81, "Type": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "CweIdentifiers": [["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute"]], "Severity": 2, "Description": "A cookie was detected without setting the 'secure' flag. The 'secure' flag for cookies prevents the client from transmitting the cookie over insecure channels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/cryptography/HashingAssignment.java", "LineNumber": 56, "EndLineNumber": 56, "Type": "Use of Weak Hash", "CweIdentifiers": [["CWE-328: Use of Weak Hash"]], "Severity": 2, "Description": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use HMAC instead.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.crypto.use-of-md5.use-of-md5"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/hijacksession/HijackSessionAssignment.java", "LineNumber": 89, "EndLineNumber": 89, "Type": "Sensitive Cookie Without 'HttpOnly' Flag", "CweIdentifiers": [["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"]], "Severity": 2, "Description": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 106, "EndLineNumber": 106, "Type": "Sensitive Cookie Without 'HttpOnly' Flag", "CweIdentifiers": [["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"]], "Severity": 2, "Description": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 111, "EndLineNumber": 111, "Type": "Sensitive Cookie Without 'HttpOnly' Flag", "CweIdentifiers": [["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"]], "Severity": 2, "Description": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java", "LineNumber": 81, "EndLineNumber": 81, "Type": "Sensitive Cookie Without 'HttpOnly' Flag", "CweIdentifiers": [["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"]], "Severity": 2, "Description": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java", "LineNumber": 96, "EndLineNumber": 96, "Type": "Sensitive Cookie Without 'HttpOnly' Flag", "CweIdentifiers": [["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag"]], "Severity": 2, "Description": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts from reading the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/hijacksession/HijackSessionAssignment.java", "LineNumber": 89, "EndLineNumber": 89, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected cookie without the SameSite attribute.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 106, "EndLineNumber": 106, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected cookie without the SameSite attribute.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/jwt/JWTVotesEndpoint.java", "LineNumber": 111, "EndLineNumber": 111, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected cookie without the SameSite attribute.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java", "LineNumber": 81, "EndLineNumber": 81, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected cookie without the SameSite attribute.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}}, {"FilePath": "src/main/java/org/owasp/webgoat/lessons/spoofcookie/SpoofCookieAssignment.java", "LineNumber": 96, "EndLineNumber": 96, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "Detected cookie without the SameSite attribute.", "standards": ["OWASP"], "Tags": {"CheckId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}}, {"FilePath": "src/main/java/org/owasp/webgoat/container/WebSecurityConfig.java", "LineNumber": 74, "EndLineNumber": 74, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "CSRF is disabled for this configuration. This is a security risk.", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"}}, {"FilePath": "src/main/java/org/owasp/webgoat/webwolf/WebSecurityConfig.java", "LineNumber": 58, "EndLineNumber": 58, "Type": "Cross-Site Request Forgery (CSRF)", "CweIdentifiers": [["CWE-352: Cross-Site Request Forgery (CSRF)"]], "Severity": 2, "Description": "CSRF is disabled for this configuration. This is a security risk.", "standards": ["OWASP"], "Tags": {"CheckId": "java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled"}}, {"FilePath": "src/main/resources/webgoat/static/js/goatApp/templates/paging_controls.html", "LineNumber": 6, "EndLineNumber": 6, "Type": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "CweIdentifiers": [["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"]], "Severity": 2, "Description": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like this: href='/<%= link %>'. You may also consider setting the Content Security Policy (CSP) header.", "standards": ["OWASP"], "Tags": {"CheckId": "javascript.express.security.audit.xss.ejs.var-in-href.var-in-href"}}]}